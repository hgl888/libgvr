Java_com_google_vr_sdk_base_CardboardViewNativeImpl_nativeSetApplicationState


Java_com_google_vr_ndk_base_GvrApi_nativeGetViewerType  -->直接返回1
Java_com_google_vr_ndk_base_GvrApi_nativeSetAsyncReprojectionEnabled  --> 直接返回true

--->Java_com_google_vr_ndk_base_GvrApi_nativeSetIgnoreManualPauseResumeTracker

DaydreamUtils  isDaydreamPhone -->直接返回true

    static int getComponentDaydreamCompatibility(Context var0, PackageManager var1, ComponentName var2) {
        Intent var3;
        (var3 = new Intent()).setPackage(var2.getPackageName());
        var3.addCategory("com.google.intent.category.DAYDREAM");
        if(!canResolveIntent(var1, var2, var3)) {
            return 0;
        } else {
            Intent var4;
            (var4 = new Intent()).setPackage(var2.getPackageName());
            var4.addCategory("com.google.intent.category.CARDBOARD");
            return canResolveIntent(var1, var2, var4)?1:2;
        }
    }


--->Java_com_google_vr_ndk_base_GvrApi_nativeSetAsyncReprojectionEnabled
--->Java_com_google_vr_ndk_base_GvrApi_nativeUsingVrDisplayService

GvrLayout
    public boolean setAsyncReprojectionEnabled(boolean var1) {
        if(Looper.getMainLooper() != Looper.myLooper()) {
            throw new IllegalStateException("setAsyncReprojectionEnabled may only be called from the UI thread");
        } else if(this.scanlineRacingView != null && !var1) {
            throw new UnsupportedOperationException("Async reprojection cannot be disabled once enabled");
        } else if(var1 && !this.daydreamUtils.isDaydreamPhone(this.getContext())) {
            return false;
        } else {
            boolean var2 = this.gvrApi.setAsyncReprojectionEnabled(var1);
            if(var1) {
                if(var2) {
                    if(!this.gvrApi.usingVrDisplayService()) {
                        this.addScanlineRacingView();
                    }
                } else {
                    Log.e("GvrLayout", "Failed to initialize async reprojection, unsupported device.");
                    this.isAsyncReprojectionVideoEnabled = false;
                    this.scanlineRacingRenderer = null;
                }
            }

            return var2;
        }
    }



    public static boolean isDaydreamPhone(Context var0) {
        return sDaydreamPhoneOverrideForTesting?true:(VERSION.SDK_INT < 24?false:var0.getPackageManager().hasSystemFeature("android.hardware.vr.high_performance"));
    }


---> Java_com_google_vr_ndk_base_GvrApi_nativeOnSurfaceCreatedReprojectionThread

ScanlineRacingRenderer
onSurfaceCreated


GvrLayout->addScanlineRacingView
 this.eglFactory.setUsePriorityContext(false);



EGL_MUTABLE_RENDER_BUFFER_BIT_KHR

MutableEglConfigChooser
    private static EGLConfig chooseConfig(EGL10 var0, EGLDisplay var1, EGLConfig[] var2, boolean var3) {
        EGLConfig[] var4 = var2;
        int var5 = var2.length;

//        for(int var6 = 0; var6 < var5; ++var6) {
//            EGLConfig var7 = var4[var6];
//            int var8 = findConfigAttrib(var0, var1, var7, EGL10.EGL_DEPTH_SIZE, 0);
//            int var9 = findConfigAttrib(var0, var1, var7, EGL10.EGL_STENCIL_SIZE, 0);
//            int var10 = findConfigAttrib(var0, var1, var7, EGL10.EGL_RED_SIZE, 0);
//            int var11 = findConfigAttrib(var0, var1, var7, EGL10.EGL_GREEN_SIZE, 0);
//            int var12 = findConfigAttrib(var0, var1, var7, EGL10.EGL_BLUE_SIZE, 0);
//            int var13 = findConfigAttrib(var0, var1, var7, EGL10.EGL_SURFACE_TYPE, 0);
//            boolean b = (var10 == 8 && var11 == 8 && var12 == 8 && var8 == 0 && var9 == 0 && (!var3 || (var13 & 4096) != 0));
//            if(b) {
//                return var7;
//            }
//        }
        for(int var6 = 0; var6 < var5; ++var6)
        {
            EGLConfig var7 = var4[var6];
            return var7;

        }

        return null;
    }


